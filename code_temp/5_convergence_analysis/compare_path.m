function [true_path, pred_path] = compare_path(I, X0, c_est, E_est, varargin)

%% parameter
p = inputParser;

addRequired(p, 'I');
addRequired(p, 'X0');
addRequired(p, 'E_est');
addRequired(p, 'c_est');
addOptional(p, 'plotON', 0);

parse(p, I, X0, c_est, E_est, varargin{:});

plotON = p.Results.plotON;

%% generate trajectories

I_est = I;
I_est.E = E_est;
I_est.c_true = c_est;
I_est.phi_kernel = get_kernel_from_c(I_est.c_true, I_est.dict);
I_est.Z_true = get_Z_from_E_c(I.E, I.c_true);     % Z is the product of E and c
I_est.graph_norm  = norm(I.E, 'fro');


% True trajectory is generated by the true graph and the true kernel
% Pred trajectory is generated by the estimated graph and the estimated kernel

pred_path = graph_forward_model(I_est, X0, 0, 0);
true_path = graph_forward_model(I, X0, 0, 0);


if plotON
    figure;
    subplot(121);
    plot(I.tgrid, squeeze(pred_path)', 'r')
    title('True Trajectory')
    xlabel('Time')
    subplot(122);
    plot(I.tgrid, squeeze(true_path)', 'k')
    title('Predicted Trajectory')
    xlabel('Time')
end
end